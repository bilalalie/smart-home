
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a1  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:

void ADC_Init (void)
{
	// ADC Enable
	// Put the number of bit ////
	SET_BIT(ADCSRA_Reg,7);  
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	86 b9       	out	0x06, r24	; 6

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	84 60       	ori	r24, 0x04	; 4
  76:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_Reg,1);
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	82 60       	ori	r24, 0x02	; 2
  7c:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_Reg,0);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	81 60       	ori	r24, 0x01	; 1
  82:	86 b9       	out	0x06, r24	; 6


	// Reference Voltage as AREF, Internal Vref turned off
	CLR_BIT(ADMUX_Reg,7);
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX_Reg,6);
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	87 b9       	out	0x07, r24	; 7

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	87 b9       	out	0x07, r24	; 7
  96:	08 95       	ret

00000098 <ADC_Read>:
}

unsigned short int ADC_Read (unsigned char channel)
{
	// ADC Channel Selection
	channel &= 0x07;
  98:	87 70       	andi	r24, 0x07	; 7
	ADMUX_Reg &= 0xE0;
  9a:	97 b1       	in	r25, 0x07	; 7
  9c:	90 7e       	andi	r25, 0xE0	; 224
  9e:	97 b9       	out	0x07, r25	; 7
	ADMUX_Reg |= channel;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	89 2b       	or	r24, r25
  a4:	87 b9       	out	0x07, r24	; 7

	// Start Single Conversion
	SET_BIT(ADCSRA_Reg,6);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	86 b9       	out	0x06, r24	; 6

	//wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));//check int
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ADC_Read+0x14>

	//ADC Flag Clear
	CLR_BIT(ADCSRA_Reg,4);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	8f 7e       	andi	r24, 0xEF	; 239
  b4:	86 b9       	out	0x06, r24	; 6
	
	//////Put the shifting code to store resolution value ////////
	unsigned short int result = 0;
	unsigned short int L = ADCL_Reg & 0x00FF;
  b6:	24 b1       	in	r18, 0x04	; 4
	unsigned short int M = ADCH_Reg & 0x0003;
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	83 70       	andi	r24, 0x03	; 3
  bc:	90 e0       	ldi	r25, 0x00	; 0
	result = L | (M<<8);
  be:	98 2f       	mov	r25, r24
  c0:	88 27       	eor	r24, r24

	return result;
}
  c2:	82 2b       	or	r24, r18
  c4:	08 95       	ret

000000c6 <main>:
#include <util/delay.h>
#include "Drivers/ADC.h"

int main(void) {
	
	DDRB=0xff;// for output port-Switch
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23
	ADC_Init();
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
	unsigned short int value_read;
	
	while(1) {
		value_read = ADC_Read(0); // reading analogue from PIN0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_Read>
		
		if(value_read > 650) { // checking the status of PIN, if it is '1', turns on the LED 
  d4:	8b 38       	cpi	r24, 0x8B	; 139
  d6:	92 40       	sbci	r25, 0x02	; 2
  d8:	10 f0       	brcs	.+4      	; 0xde <main+0x18>
			PORTB=0x00;// Turning off the LED
  da:	18 ba       	out	0x18, r1	; 24
  dc:	f8 cf       	rjmp	.-16     	; 0xce <main+0x8>
		}
		else { // checking the status of PIN, if it is '0', turns off the LED
			PORTB=0x02;   // Turning on the LED
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	f5 cf       	rjmp	.-22     	; 0xce <main+0x8>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
